apply plugin: 'com.android.application'
// atlas配置 begin
def apVersion = getEnvValue("apVersion", "");
apply plugin: 'com.taobao.atlas'
// atlas配置 end

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion
    signingConfigs {
        release {
            storeFile file(build_versions.storeFile)
            storePassword build_versions.storePassword
            keyAlias build_versions.keyAlias
            keyPassword build_versions.keyPassword
        }
    }
    defaultConfig {
        applicationId build_versions.applicationId
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion
        versionCode build_versions.versionCode
        versionName build_versions.versionName

        manifestPlaceholders = [app_name: build_versions.app_name]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    /**
     * 不要使用多渠道和自定buildType方式，因为atlas对这块支持不完善
     *
     * 插件	                  productFlavors	      自定义buildType
     * google插件	              支持	                支持
     * atlasplugin 构建apk	      支持	               不支持
     * atlasplugin 构建动态部署	 不支持	               不支持
     **/
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 显示app名称+当前版本号
                def fileName = "${build_versions.apk_head_name}-V${variant.versionName}"
//                // 加入打包时间
//                fileName = fileName + "-${releaseTime()}"
                // 如果是debug版本，加入beta版本号
                if ('debug'.equals(variant.buildType.name)) {
                    fileName = fileName + "-beta.apk"
                } else {
                    // 如果是release版本，直接显示
                    fileName = fileName + "-release.apk"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

//// 显示的时间格式，形如20171110
//def releaseTime() {
//    return new Date().format("yyyyMMdd", TimeZone.getDefault());
//}

// atlas配置 begin
atlas {
    atlasEnabled true

    manifestOptions {
        removeCustomPermission false
    }

    buildTypes {
        debug {
            baseApFile project.rootProject.file('../app/build/outputs/apk/app-debug.ap')
        }
    }
}
// atlas配置 end

// 获取执行gradle命令时的运行参数
String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

repositories {
    flatDir {
        dirs 'libs', '../base/libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // 测试 dependency begin
    androidTestCompile(build_dependency["test_espresso_core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile build_dependency["test_junit"]
    // 测试 dependency end

    // android官方 dependency begin
    compile build_dependency["appcompat_v7"]
    compile build_dependency["constraint_layout"]
    // android官方 dependency end

    // 主体基础模块 begin
    compile project(':base')
    // 主体基础模块 end

    // 入口模块 begin
    compile project(':app-welcome')
    // 入口模块 end

    // atlas配置 begin
    compile(build_dependency["atlas_core"]) {
        transitive = true
    }
    // bundle模块 begin
    bundleCompile project(':bundle-login')
    bundleCompile project(':bundle-main')
    bundleCompile project(':bundle-user')

    bundleCompile project(':bundle-business-mvc')
    bundleCompile project(':bundle-business-mvp')
    bundleCompile project(':bundle-business-mvvm')
    bundleCompile project(':bundle-business-demo')
    // bundle模块 end
    // atlas配置 end
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}