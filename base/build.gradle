apply plugin: 'com.android.library'

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion

    defaultConfig {
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion
        versionCode build_versions.versionCode
        versionName build_versions.versionName

        manifestPlaceholders = [baidu_for_app_key: build_app_key.baidu_for_app_key]

        buildConfigField "String", "APP_NAME", "\"${build_versions.app_name}\""

        buildConfigField "String", "BASE_URL", "\"${build_url.base_url}\""
        buildConfigField "String", "WEI_BO_REDIRECT_URL", "\"${build_url.wei_bo_secret_key}\""

        buildConfigField "String", "QQ_FOR_APP_ID", "\"${build_app_key.qq_for_app_id}\""
        buildConfigField "String", "WX_FOR_APP_ID", "\"${build_app_key.wx_for_app_id}\""
        buildConfigField "String", "WX_SECRET_KEY", "\"${build_app_key.wx_secret_key}\""
        buildConfigField "String", "WEI_BO_FOR_APP_KEY", "\"${build_app_key.wei_bo_for_app_key}\""
        buildConfigField "String", "WEI_BO_SECRET_KEY", "\"${build_app_key.wei_bo_secret_key}\""

        buildConfigField "String", "APP_THIRD_MAP_PROVIDER", "\"${app_third_sdk_provider.map_provider}\""
        buildConfigField "String", "APP_THIRD_IMAGE_LOADER_PROVIDER", "\"${app_third_sdk_provider.image_loader_provider}\""
        buildConfigField "String", "APP_THIRD_HTTP_REQUEST_PROVIDER", "\"${app_third_sdk_provider.http_request_provider}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            res.srcDirs += [
                    'src/main/res/layout/activity',
                    'src/main/res/layout/fragment',
                    'src/main/res/layout/widget',
                    'src/main/res/layout/dialog',
                    'src/main/res/layout/item'
            ]
            jniLibs.srcDir 'libs'
            jni.srcDirs = []    //disable automatic ndk-build
        }
    }
    resourcePrefix "base_"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // 测试 dependency begin
    androidTestCompile(build_dependency["test_espresso_core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile build_dependency["test_junit"]
    // 测试 dependency end

    // android官方 dependency begin
    compile build_dependency["appcompat_v7"]
    compile build_dependency["constraint_layout"]
    compile build_dependency["support_design"]
    // android官方 dependency end

    // google官方 dependency begin
    compile build_dependency["google_gson"]
    // google官方 dependency end

    // 第三方 dependency begin
    compile build_dependency["nohttp_okhttp"]
    compile build_dependency["aigestudio_wheelpicker"]
    compile build_dependency['safewebviewbridge']
    compile build_dependency['bumptech_glide']
    annotationProcessor build_dependency['bumptech_glide_compiler']
    compile(name: build_dependency["sina_weibo_sdk"], ext: 'aar')
    // 第三方 dependency end

    // library project begin
    compile project(':base-lib-immersionbar')
    // library project end

    // 路由模块 begin
    compile project(':router')
    // 路由模块 end
}
